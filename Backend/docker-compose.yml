version: "3.9"

services:
  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    volumes:
      - ./PythonBackend/volume/chromadb-data-server:/chroma/chroma/
    ports:
      - 8000:8000
    networks:
      - microservices-network

  recc-system-1:
    build:
      context: ./PythonBackend
      dockerfile: Dockerfile-recc1
    volumes:
      - ./PythonBackend/volume/chromadb-data:/volume/chromadb-data
    ports:
      - 5000:5000
    environment:
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=dev
      - PORT=5000
      - CHROMA_HOST=chroma
    depends_on:
      - chroma
    networks:
      - microservices-network
    env_file:
      - .env
    container_name: recc-system-1

  recc-system-2:
    build:
      context: ./PythonBackend
      dockerfile: Dockerfile-recc2
    ports:
      - 5001:5001
    environment:
      - MONGO_URI=${MONGO_URI}
      - MONGO_DB=dev
      - PORT=5001
    depends_on:
      - factors-db
    networks:
      - microservices-network
    env_file:
      - .env
    container_name: recc-system-2

  factors-db:
    image: mysql:8.0
    container_name: mysql-factors-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - microservices-network
    volumes:
      - mysql_data:/var/lib/mysql
    env_file:
      - .env
  # Eureka service for service discovery
  eureka:
    build:
      context: ./JavaBackend/eureka
      dockerfile: Dockerfile
    image: eureka-service:1.0
    container_name: eureka-service
    ports:
      - "8761:8761"
    networks:
      - microservices-network

  # API Gateway with routes configured for service discovery
  gateway:
    build:
      context: ./JavaBackend/gateway
      dockerfile: Dockerfile
    image: gateway-service:1.0
    container_name: gateway-service
    ports:
      - "8888:8888"
      - "5002:5005"
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - eureka
    networks:
      - microservices-network

  # Auth service with Kafka integration and database connection
  auth:
    build:
      context: ./JavaBackend/auth
      dockerfile: Dockerfile
    image: auth-service:1.0
    container_name: auth-service
    ports:
      - "9898:9898"
      - "5008:5005"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_AUTH}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - eureka
      - db-auth
      - kafka
    networks:
      - microservices-network

  # Product service
  product:
    build:
      context: ./JavaBackend/product
      dockerfile: Dockerfile
    image: product-service:1.0
    container_name: product-service
    ports:
      - "8999:8999"
      - "5007:5005"
    environment:
      - EUREKA_CLIENT_SERVICE_URL=${EUREKA_URL}
      - MONGO_URI=${MONGO_URI}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - eureka
      - kafka
    networks:
      - microservices-network

  basket:
    build:
      context: ./JavaBackend/basket
      dockerfile: Dockerfile
    image: basket-service:1.0
    container_name: basket-service
    ports:
      - "9799:9799"
      - "5006:5005"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_BASKET}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - eureka
      - db-basket
      - kafka
    networks:
      - microservices-network

  like:
    build:
      context: ./JavaBackend/like
      dockerfile: Dockerfile
    image: like-service:1.0
    container_name: like-service
    ports:
      - "9999:9999"
      - "5005:5005"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_LIKE}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_URL}
      - API_GATEWAY_URL=${API_GATEWAY_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      - eureka
      - db-like
      - kafka
    networks:
      - microservices-network

  order:
    build:
      context: ./JavaBackend/order
      dockerfile: Dockerfile
    image: order-service:1.0
    container_name: order-service
    ports:
      - "9779:9779"
      - "5009:5005"
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_ORDER}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_URL}
      - JWT_SECRET=${JWT_SECRET}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_ENDPOINT_SECRET=${STRIPE_ENDPOINT_SECRET}
    depends_on:
      - eureka
      - db-order
      - kafka
    networks:
      - microservices-network

  db-auth:
    image: postgres:15
    container_name: postgres-db-auth
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    networks:
      - microservices-network

  db-basket:
    image: postgres:15
    container_name: postgres-db-basket
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: basket_db
    ports:
      - "5430:5432"
    networks:
      - microservices-network

  db-like:
    image: postgres:15
    container_name: postgres-db-like
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: like_db
    ports:
      - "5433:5432"
    networks:
      - microservices-network

  db-order:
    image: postgres:15
    container_name: postgres-db-order
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: order_db
    ports:
      - "5429:5432"
    networks:
      - microservices-network

  # Zookeeper service for Kafka coordination
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - microservices-network

  # Kafka broker service
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 # Expose Kafka as "kafka" for internal communication
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  mysql_data:
